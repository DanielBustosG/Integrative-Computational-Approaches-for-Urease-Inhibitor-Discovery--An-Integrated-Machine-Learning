install.packages("ggplot2")
install.packages("dplyr")
setwd("~/Documents/RMSD")
setwd("~/Library/CloudStorage/Dropbox/Urease_2024/Pharm_ML_VirtualScreening_Triazoles/Urease_Triazol/Articule_MLVS/Figs/RMSD")
library(readxl)
library(ggplot2)
library(dplyr)
library(flextable)
library(knitr)
# Usa una ruta relativa para el archivo (debe estar en el mismo directorio del script)
input_file <- "rmsd_prot.xlsx"
# Carpeta de salida (creada dentro del directorio actual)
output_folder <- file.path(getwd(), "Results_RMSD", "RMSD")
if (!dir.exists(output_folder)) {
dir.create(output_folder, recursive = TRUE)
}
#-----------------------------------------------------------------------
# 2. PROCESAMIENTO DE DATOS
#-----------------------------------------------------------------------
process_sheet <- function(sheet_name) {
data <- read_excel(input_file, sheet = sheet_name)
colnames(data) <- c("RMSD")
df <- data.frame(Frame = 1:nrow(data), mean = data$RMSD)
df$Protein <- sheet_name
return(df)
}
# Listado de hojas
sheets <- c("AHA", "BME", "DJM", "CA1", "CA2", "CA3", "CA4", "CA5", "CA6", "CA7")
# Combinar todas las hojas
data_final <- do.call(rbind, lapply(sheets, process_sheet))
data_final$Protein <- factor(data_final$Protein, levels = sheets)
#-----------------------------------------------------------------------
# 4. GRÁFICO DE LÍNEAS (LINE PLOT)
#-----------------------------------------------------------------------
linePlot <- ggplot(data = data_final, aes(x = Frame, y = mean, group = Protein, color = Protein)) +
geom_line(linewidth = 1) +
scale_color_grey(start = 0.1, end = 0.8) +
theme_test() +
scale_x_continuous(name = "Frame", limits = c(0, NA)) +
scale_y_continuous(name = "Ligand RMSD (Å)", limits = c(0, 8), breaks = seq(from = 0, to = 8, by = 2)) +
theme(
legend.position = "top",
legend.title = element_blank(),
legend.text = element_text(color = "black", size = 15),
axis.title = element_text(color = "black", face = "bold", size = 19),
axis.text.x = element_text(colour = "black", size = 15),
axis.text.y = element_text(colour = "black", size = 15),
axis.ticks = element_line(colour = "black", size = 0.5),
panel.border = element_rect(colour = "black", fill = NA, size = 0.5)
)
linePlot
# --- CORRECCIÓN AQUÍ ---
# Guardar el GRÁFICO DE LÍNEAS (objeto: linePlot, nombre: RMSD_ligand.png)
ggsave(
filename = file.path(output_folder, "RMSD_ligand.png"),
plot = linePlot,
width = 10, height = 6, dpi = 300
)
#-----------------------------------------------------------------------
# 5. PREPARACIÓN DE DATOS PARA BOXPLOT Y TABLA
#-----------------------------------------------------------------------
library(readxl)
# Archivo de entrada (en el mismo directorio del script)
input_file <- "rmsd_prot.xlsx"
# Listado de hojas
sheets <- c("AHA", "BME", "DJM", "CA1", "CA2", "CA3", "CA4", "CA5", "CA6", "CA7")
# Lectura de cada hoja y combinación
sistemas <- lapply(sheets, function(s) {
df <- read_excel(input_file, sheet = s)
colnames(df) <- c("RMSD")
df$sistema <- s
return(df)
})
datos_comb <- do.call(rbind, sistemas)
datos_comb$sistema <- factor(datos_comb$sistema, levels = sheets)
#-----------------------------------------------------------------------
# 6. GRÁFICO BOXPLOT (ESTILO BLANCO Y NEGRO)
#-----------------------------------------------------------------------
boxPlot <- ggplot(datos_comb, aes(x = sistema, y = RMSD)) +
geom_boxplot(fill = "white", color = "black", outlier.size = 1, outlier.shape = 19) +
theme_test() +
scale_x_discrete(name = "Candidates") +
scale_y_continuous(name = "Ligand RMSD (Å)") +
theme(
legend.position = "none",
axis.title = element_text(color = "black", face = "bold", size = 19),
axis.text.x = element_text(colour = "black", size = 15, angle = 0, hjust = 1),
axis.text.y = element_text(colour = "black", size = 15),
axis.ticks = element_line(colour = "black", size = 0.5),
panel.border = element_rect(colour = "black", fill = NA, size = 0.5)
)
# Muestra el gráfico en RStudio
boxPlot
#-----------------------------------------------------------------------
# 6. GRÁFICO BOXPLOT (ESTILO BLANCO Y NEGRO)
#-----------------------------------------------------------------------
boxPlot <- ggplot(datos_comb, aes(x = sistema, y = RMSD)) +
geom_boxplot(fill = "#DC143C", color = "black", outlier.size = 1, outlier.shape = 19) +
theme_test() +
scale_x_discrete(name = "Candidates") +
scale_y_continuous(name = "Ligand RMSD (Å)") +
theme(
legend.position = "none",
axis.title = element_text(color = "black", face = "bold", size = 19),
axis.text.x = element_text(colour = "black", size = 15, angle = 0, hjust = 1),
axis.text.y = element_text(colour = "black", size = 15),
axis.ticks = element_line(colour = "black", size = 0.5),
panel.border = element_rect(colour = "black", fill = NA, size = 0.5)
)
# Muestra el gráfico en RStudio
boxPlot
#-----------------------------------------------------------------------
# 6. GRÁFICO BOXPLOT (CONTROLES = VERDE, CANDIDATOS = NARANJO)
#-----------------------------------------------------------------------
library(ggplot2)
# Define los grupos
controles <- c("AHA", "BME", "DJM")
candidatos <- c("CA1", "CA2", "CA3", "CA4", "CA5", "CA6", "CA7")
# Crea una nueva columna para asignar colores
datos_comb$grupo <- ifelse(datos_comb$sistema %in% controles, "Control", "Candidato")
# Define colores personalizados
colores <- c("Control" = "#228B22",     # Verde
"Candidato" = "#FF8C00")   # Naranjo
# Genera el boxplot
boxPlot <- ggplot(datos_comb, aes(x = sistema, y = RMSD, fill = grupo)) +
geom_boxplot(color = "black", outlier.size = 1, outlier.shape = 19) +
scale_fill_manual(values = colores) +
theme_test() +
scale_x_discrete(name = "Candidates") +
scale_y_continuous(name = "Ligand RMSD (Å)") +
theme(
legend.position = "none",
axis.title = element_text(color = "black", face = "bold", size = 19),
axis.text.x = element_text(colour = "black", size = 15, angle = 0, hjust = 1),
axis.text.y = element_text(colour = "black", size = 15),
axis.ticks = element_line(colour = "black", size = 0.5),
panel.border = element_rect(colour = "black", fill = NA, size = 0.5)
)
# Muestra el gráfico
boxPlot
# Guarda el gráfico en alta calidad
ggsave(
filename = file.path(output_folder, "RMSD_ligand-boxplot.png"),
plot = boxPlot,
width = 7, height = 5, dpi = 600, units = "in", bg = "white"
)
# Define colores personalizados
colores <- c("Control" = "#008B00",     # Verde
"Candidato" = "#FF8C00")   # Naranjo
# Genera el boxplot
boxPlot <- ggplot(datos_comb, aes(x = sistema, y = RMSD, fill = grupo)) +
geom_boxplot(color = "black", outlier.size = 1, outlier.shape = 19) +
scale_fill_manual(values = colores) +
theme_test() +
scale_x_discrete(name = "Candidates") +
scale_y_continuous(name = "Ligand RMSD (Å)") +
theme(
legend.position = "none",
axis.title = element_text(color = "black", face = "bold", size = 19),
axis.text.x = element_text(colour = "black", size = 15, angle = 0, hjust = 1),
axis.text.y = element_text(colour = "black", size = 15),
axis.ticks = element_line(colour = "black", size = 0.5),
panel.border = element_rect(colour = "black", fill = NA, size = 0.5)
)
# Muestra el gráfico
boxPlot
# Define colores personalizados
colores <- c("Control" = "#7CCD7C",     # Verde
"Candidato" = "#FF8C00")   # Naranjo
# Genera el boxplot
boxPlot <- ggplot(datos_comb, aes(x = sistema, y = RMSD, fill = grupo)) +
geom_boxplot(color = "black", outlier.size = 1, outlier.shape = 19) +
scale_fill_manual(values = colores) +
theme_test() +
scale_x_discrete(name = "Candidates") +
scale_y_continuous(name = "Ligand RMSD (Å)") +
theme(
legend.position = "none",
axis.title = element_text(color = "black", face = "bold", size = 19),
axis.text.x = element_text(colour = "black", size = 15, angle = 0, hjust = 1),
axis.text.y = element_text(colour = "black", size = 15),
axis.ticks = element_line(colour = "black", size = 0.5),
panel.border = element_rect(colour = "black", fill = NA, size = 0.5)
)
# Muestra el gráfico
boxPlot
# Guarda el gráfico en alta calidad
ggsave(
filename = file.path(output_folder, "RMSD_ligand-boxplot.png"),
plot = boxPlot,
width = 7, height = 5, dpi = 600, units = "in", bg = "white"
)
#-----------------------------------------------------------------------
# 7. TABLA DE ESTADÍSTICAS
#-----------------------------------------------------------------------
resultados <- datos_comb %>%
group_by(sistema) %>%
summarise(
Q1 = quantile(RMSD, 0.25),
Median = median(RMSD),
Q3 = quantile(RMSD, 0.75),
Mean = mean(RMSD),
S.D. = sd(RMSD)
) %>%
rename(Candidates = sistema)
resultados
# Crea y muestra la tabla en el Viewer
flex_table1 <- flextable(resultados) %>%
colformat_double(j = c("Q1", "Median", "Q3", "Mean", "S.D."), digits = 3) %>%
set_table_properties(layout = "autofit")
print(flex_table1)
# Crea y muestra la tabla en la consola
print(kable(resultados, digits = 3))
# -----------------------------
# 0) Packages
# -----------------------------
suppressPackageStartupMessages({
library(readxl)
library(ggplot2)
library(dplyr)
library(writexl)
})
# -----------------------------
# 1) Resolve "script directory"
#    Works in Source, Rscript, or Console (falls back to getwd()).
# -----------------------------
script_dir <- (function() {
# RStudio editor
p1 <- tryCatch(rstudioapi::getSourceEditorContext()$path, error = function(e) NULL)
if (!is.null(p1) && nzchar(p1)) return(dirname(p1))
# Rscript execution
p2 <- tryCatch(normalizePath(sub("^--file=", "",
commandArgs(trailingOnly = FALSE)[grep("^--file=", commandArgs(trailingOnly = FALSE))][1])),
error = function(e) NULL)
if (!is.null(p2) && nzchar(p2)) return(dirname(p2))
# knit / RMarkdown
p3 <- tryCatch(normalizePath(getOption("knit.rmd.original", "")), error = function(e) NULL)
if (!is.null(p3) && nzchar(p3)) return(dirname(p3))
# fallback: working directory
getwd()
})()
# -----------------------------
# 2) Inputs
# -----------------------------
input_file <- file.path(script_dir, "rmsd_prot.xlsx")
sheets     <- c("AHA", "BME", "DJM", "CA1", "CA2", "CA3", "CA4", "CA5", "CA6", "CA7")
# -----------------------------
# 3) Read & combine all sheets
# -----------------------------
read_one <- function(s) {
df <- read_excel(input_file, sheet = s)
colnames(df) <- c("RMSD")                    # ensure standard name
df$sistema   <- s
df
}
combined <- do.call(rbind, lapply(sheets, read_one))
combined$sistema <- factor(combined$sistema, levels = sheets)
# -----------------------------
# 4) Group assignment for colors
#    Controls = AHA, BME, DJM -> green
#    Candidates = CA1–CA7 -> orange
# -----------------------------
controls   <- c("AHA", "BME", "DJM")
combined$group <- ifelse(combined$sistema %in% controls, "Control", "Candidate")
# -----------------------------
# 5) Boxplot (keep aesthetics identical; only fill by group)
# -----------------------------
fill_colors <- c("Control" = "#7CCD7C",   # green
"Candidate" = "#FF8C00") # orange
boxPlot <- ggplot(combined, aes(x = sistema, y = RMSD, fill = group)) +
geom_boxplot(color = "black", outlier.size = 1, outlier.shape = 19) +
scale_fill_manual(values = fill_colors) +
theme_test() +
scale_x_discrete(name = "Candidates") +
scale_y_continuous(name = "Ligand RMSD (Å)") +
theme(
legend.position = "none",
axis.title = element_text(color = "black", face = "bold", size = 19),
axis.text.x = element_text(colour = "black", size = 15, angle = 0, hjust = 1),
axis.text.y = element_text(colour = "black", size = 15),
axis.ticks = element_line(colour = "black", size = 0.5),
panel.border = element_rect(colour = "black", fill = NA, size = 0.5)
)
# Preview in RStudio (optional)
print(boxPlot)
# Save boxplot in the same directory as the script
ggsave(
filename = file.path(script_dir, "RMSD_ligand-boxplot.png"),
plot = boxPlot,
width = 7, height = 5, dpi = 600, units = "in", bg = "white"
)
# -----------------------------
# 6) Summary statistics and export to Excel
# -----------------------------
stats_tbl <- combined %>%
group_by(sistema) %>%
summarise(
N      = dplyr::n(),
Q1     = quantile(RMSD, 0.25, na.rm = TRUE),
Median = median(RMSD, na.rm = TRUE),
Q3     = quantile(RMSD, 0.75, na.rm = TRUE),
Mean   = mean(RMSD, na.rm = TRUE),
SD     = sd(RMSD, na.rm = TRUE),
.groups = "drop"
) %>%
rename(Candidates = sistema) %>%
mutate(across(where(is.numeric), ~ round(., 3)))
# Write Excel in the same directory as the script
write_xlsx(list(RMSD_stats = stats_tbl),
path = file.path(script_dir, "Stats.xlsx"))
# -----------------------------
# 7) Done
# -----------------------------
message("Saved plot: ", file.path(script_dir, "RMSD_ligand-boxplot.png"))
message("Saved stats: ", file.path(script_dir, "Stats.xlsx"))

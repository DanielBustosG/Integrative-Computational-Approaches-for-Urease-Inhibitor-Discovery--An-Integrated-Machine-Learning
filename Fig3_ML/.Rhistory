suppressPackageStartupMessages({
library(dplyr)
library(tidyr)
library(ggplot2)
library(scales)
library(patchwork)
})
# -----------------------------
# 1) Resolve "script directory"
#    Works in Source, Rscript, or Console (fallback to getwd()).
# -----------------------------
script_dir <- (function() {
p1 <- tryCatch(rstudioapi::getSourceEditorContext()$path, error = function(e) NULL)
if (!is.null(p1) && nzchar(p1)) return(dirname(p1))
p2 <- tryCatch(normalizePath(sub("^--file=", "",
commandArgs(trailingOnly = FALSE)[grep("^--file=", commandArgs(trailingOnly = FALSE))][1])),
error = function(e) NULL)
if (!is.null(p2) && nzchar(p2)) return(dirname(p2))
p3 <- tryCatch(normalizePath(getOption("knit.rmd.original", "")), error = function(e) NULL)
if (!is.null(p3) && nzchar(p3)) return(dirname(p3))
getwd()
})()
# -----------------------------
# 2) Load data from RDS (same folder as this script)
#    Expectation: a data.frame/tibble with columns used below.
# -----------------------------
data <- readRDS(file.path(script_dir, "MegaDataML.rds"))
# -----------------------------
# 3) Long-format counts by model (stacked bars)
#    NOTE: We keep the original pivoting intent; if your RDS already
#    contains only the needed model columns, this will work as-is.
# -----------------------------
# Choose all columns that start with "dt_" or "rf_" (as in the original intent)
data_long <- data %>%
pivot_longer(cols = matches("^(dt_|rf_)"),
names_to = "modelo", values_to = "prediccion")
# Count yes/no per model (plot not saved to file in your original code; we keep that behavior)
conteo <- data_long %>%
count(modelo, prediccion)
# -----------------------------
# 3) Long-format counts by model (stacked bars)
#    NOTE: We keep the original pivoting intent; if your RDS already
#    contains only the needed model columns, this will work as-is.
# -----------------------------
# Choose all columns that start with "dt_" or "rf_" (as in the original intent)
data_long <- data %>%
pivot_longer(cols = matches("^(dt_|rf_)"),
names_to = "modelo", values_to = "prediccion")
View(data)
# -----------------------------
# 4) Barplot comparison for selected models (aesthetics unchanged)
# -----------------------------
columnas_modelos <- c("dt_boruta_5_50", "xgb_nfs_25_50", "dt_xgb_5", "knn_xgb_5_50", "rf_boruta_10_50")
datos_largo <- data %>%
pivot_longer(cols = all_of(columnas_modelos),
names_to = "Modelo",
values_to = "Predicción") %>%
mutate(Predicción = factor(Predicción, levels = c("yes", "no")))
